#+TITLE:Min-macs Init.el
#+AUTHOR:Huaxuan Yang
An emacs init config, in org-mode!

* Setup
** Speedup startup
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
#+end_src
** Shutup emacs
#+begin_src emacs-lisp
  (setq warning-supress-types '('(el)))
  (require 'cl-lib)
#+end_src
** Straight.el setup
#+begin_src emacs-lisp
  (defvar bootstrap-file)
  (let ((bootstrap-file
              (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
              (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
          (with-current-buffer
                      (url-retrieve-synchronously
                              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
                                          'silent 'inhibit-cookies)
                          (goto-char (point-max))
                                  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
#+end_src
** Debug-on-error
#+begin_src emacs-lisp
  (setq debug-on-error t)
#+end_src
** Use-package setup
#+begin_src emacs-lisp
  (eval-when-compile
    (straight-use-package 'use-package))
#+end_src
* Packages
** Evil
*** evil 
#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config (evil-mode 1))
#+end_src
*** evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :straight t
    :after evil
    :config
    (evil-collection-init))
#+end_src
** Interface
*** doom-themes
#+begin_src emacs-lisp
   (use-package doom-themes
     :straight t
     :config
     (setq doom-themes-enable-bold t
           doom-themes-enable-italic t)
     (load-theme 'doom-city-lights t))
#+end_src
*** doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :straight t
    :config
    (setq doom-mt
    :config
    (which-key-mode 1)
    (which-key-setup-minibuffer))
#+end_src
*** all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :if (display-graphic-p))
#+end_src
*** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src
*** treemacs
**** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :straight t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                5000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-no-delete-other-windows         t
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))
#+end_src
**** treemacs-all-the-icons
#+begin_src emacs-lisp
  (use-package treemacs-all-the-icons
    :straight t
    :config (treemacs-load-theme "all-the-icons"))
#+end_src
**** treemacs-evil
#+begin_src emacs-lisp
  (use-package treemacs-evil
    :straight t
    :after (treemacs evil))
#+end_src
#+begin_src emacs-lisp
  (use-package treemacs-icons-dired
    :straight t
    :hook (dired-mode . treemacs-icons-dired-enable-once))
#+end_src
#+begin_src emacs-lisp
  (use-package treemacs-magit
    :straight t
    :after (treemacs magit))
#+end_src
*** dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :straight t
    :custom
    (dashboard-banner-logo-title "GNU Emacs!")
    (dashboard-startup-banner 'logo)
    (dashboard-center-content t)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-items '((agenda . 5)
                       (recents . 5)
                       (bookmarks . 5)
                       (projects . 5)
                       (registers . 5)))
    :config
    (dashboard-setup-startup-hook))
#+end_src
** Autocompletion
*** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :config
    (which-key-mode 1)
    (which-key-setup-minibuffer))
 #+end_src
*** ivy
 #+begin_src emacs-lisp
  (use-package ivy
    :straight t
    :config
    (ivy-mode)
    :custom
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-count-format "%d/%d "))
#+end_src
*** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :init (global-flycheck-mode))
  ;:config (add-hook 'after-init-hook' 'global-flycheck-mode))
#+end_src
*** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :straight t
    :config
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+end_src
*** marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :straight t
    :bind (("M-A" . marginalia-cycle)
        :map minibuffer-local-map
        ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src
*** origami
#+begin_src emacs-lisp
  (use-package origami
  :straight t)
#+end_src
*** company
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :config
    (company-mode))
#+end_src
** LSP
*** lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook
    ((lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
#+end_src
*** lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode)
#+end_src
*** lsp-treemacs
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :straight t
    :commands lsp-treemacs-errors-list)
#+end_src
** DAP
#+begin_src emacs-lisp
  (use-package dap-mode :straight t
    :config
    (dap-mode)
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
    (
  require 'dap-cpptools))
  (use-package zoom
    :straight t
    :config
    (zoom-mode)
    :custom
    (zoom-size '(0.618 . 0.618)))
#+end_src
** Git
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :config
    (with-eval-after-load 'magit-mode
      (add-hook 'after-save-hook 'magit-after-save-refresh-status t))
    (setq magit-status-buffer-switch-function
          #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Org
*** org
#+begin_src emacs-lisp
  (use-package org
    :straight t
    :hook
    (org-mode . org-indent-mode)
    (org-mode . variable-pitch-mode)
    :custom
    (org-agenda-files '("~/org" "~/RoamNotes"))
    (org-todo-keywords
     '((sequence "TODO(t)" "IN-PROGRESS(p)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)" "STALLED(s)")))
    (org-log-done `time)
    (org-enforce-todo-dependencies t)
    (org-hide-emphasis-markers t)
    (org-src-fontify-natively t)
    (org-hidden-keywords '(title))
    :config
    (font-lock-add-keywords
     'org-mode
     ; Hide all org stars
     '(("^\\*+ "
        (0
         (prog1 nil
           (put-text-property (match-beginning 0) (match-end 0)
                              'face (list :foreground
                                          (face-attribute
                                           'default :background))))))))
    (let* ((variable-tuple
          (cond ((x-list-fonts "ETBembo") '(:font "ETBembo"))
                ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
      (custom-theme-set-faces
      'user
      `(variable-pitch ((t (,@variable-tuple :height 140 :weight thin))))
      `(fixed-pitch ((t (:family "JetBrains Mono" :height 130))))
      `(org-level-8 ((t (,@headline ,@variable-tuple))))
      `(org-level-7 ((t (,@headline ,@variable-tuple))))
      `(org-level-6 ((t (,@headline ,@variable-tuple))))
      `(org-level-5 ((t (,@headline ,@variable-tuple :height 1.30))))
      `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.40))))
      `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.50))))
      `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.60))))
      `(org-level-1 ((t (,@headline ,@variable-tuple :height 2.00))))
      `(org-block ((t (:weight normal :inherit (shadow fixed-pitch)))))
      `(org-document-title ((t (,@headline ,@variable-tuple :height 2.5 :underline nil))))
      `(org-document-info  ((t (,@headline ,@variable-tuple :height 1.50 :underline nil)))))))
#+end_src
*** evil-org
#+begin_src emacs-lisp
  (use-package evil-org
    :straight t
    :after org
    :hook
    (org-mode . (lambda () evil-org-mode))
    (org-mode . (lambda () (setq display-line-numbers-type nil)))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
  (use-package org-roam
    :straight t
    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-dailies-directory "dailies/")
    (org-roam-dailies-capture-templates
     '(("d" "default" entry
        "* %?"
        :target (file+head "%<%Y-%m-%d>.org"
                           "#+title: %<%Y-%m-%d>\n"))))
    (org-roam-complete-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+end_src
** Hydra
#+begin_src emacs-lisp
(use-package hydra)
  :straight t
#+end_src
* Misc
#+begin_src emacs-lisp
  ; Disable scroll bar
  (scroll-bar-mode -1)
  ; Set font
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono"))
  ;; Prettify? TODO
  ; Summon the hydra
  (global-set-key
   (kbd "C-M-W")
   (defhydra hydra-window () "Move around windows with hydra and vi binds"
     ("h" windmove-left)
     ("l" windmove-right)
     ("j" windmove-down)
     ("k" windmove-up)
     ("q" nil "cancel")))
  (global-set-key
   (kbd "C-M-R")
   (defhydra hydra-resize () "Resize window"
     ("h" shrink-window-horizontally)
     ("l" enlarge-window-horizontally)
     ("j" shrink-window)
     ("k" enlarge-window)
     ("q" nil "cancel")))
  ; Enable CUA (Global copy-paste)
  (cua-mode)
  ; Relative line numbers
  ;(global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ; Disable automatic creation of backup files
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying      t  ; Don't de-link hard links
        version-control        t  ; Use version numbers on backups
        delete-old-versions    t  ; Automatically delete excess backups:
        kept-new-versions      20 ; how many of the newest versions to keep
        kept-old-versions      5) ; and how many of the old
  (global-auto-revert-mode t)
  (setq dired-auto-revert-buffer t)
  ; Use spaces
  (setq-default indent-tabs-mode nil)

  ; Shortcuts for common uses
  (defun goto-todo () "Goto ~/org/Cooode.org" (interactive)
         (split-window-horizontally)
         (find-file "~/org/Cooode.org"))
  (defun goto-config () "Goto Emacs config" (interactive)
         (split-window-below)
         (find-file (concat user-emacs-directory "init.el")))

  ; Bind completions at point
  (global-set-key (kbd "C-M-i") 'completion-at-point)
  (let* ((agenda-map (make-sparse-keymap)))
      (define-key agenda-map (kbd "C-a") 'org-agenda)
      (define-key agenda-map (kbd "C-t") 'goto-todo)
      (global-set-key (kbd "C-a") agenda-map))

  ; No bell
  (setq ring-bell-function 'ignore)

  ;; SECTION: SETTINGS FROM EMACS CUSTOMIZE
  (put 'upcase-region 'disabled nil)
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-safe-themes
     '("7a7b1d475b42c1a0b61f3b1d1225dd249ffa1abb1b7f726aec59ac7ca3bf4dae" "d47f868fd34613bd1fc11721fe055f26fd163426a299d45ce69bef1f109e1e71" "fb3edc31220f6ffa986dbbb184c45c7684e0c4e04fbd6ea44a33cc52291c3894" "82e799bb68717f8cafe76263134e32e1e142add3563e49099927d517a39478d0" default))
   '(menu-bar-mode nil)
   '(org-agenda-files
     '() nil nil "Customized with use-package org")
   '(package-selected-packages '(gigs-splash evil-org use-package ##))
   '(tool-bar-mode nil))
#+end_src
